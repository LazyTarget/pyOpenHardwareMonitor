# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  # push:
  #   tags:
  #     - v**
  release:
    types: [published]

permissions:
  contents: read

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

  update-version:
    runs-on: ubuntu-latest
    needs:
      - checkout
    steps:
      - name: print directory
        shell: bash
        run: ls -fl
      - name: Update version in const.py
        shell: bash
        run: python3 ./../.github/scripts/update_version_const.py --version ${{ github.ref }}
      - name: check for changes
        shell: bash
        run: git status
      - name: stage changed files
        shell: bash
        run: git add pyopenhardwaremonitor/const.py
      - name: Commit changed files
        shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "rel: Auto update version" || true"
          
      - name: Update tag
        shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -fa ${{ github.event.release.tag_name }} -m "Auto update version: ${{ github.event.release.tag_name }}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ inputs.GITHUB_TOKEN }}
      - name: Push tag change
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ inputs.GITHUB_TOKEN }}
          force: true
          tags: true

  release-build:
    runs-on: ubuntu-latest
    needs:
      - checkout
      - update-version
    steps:
      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - checkout
      - update-version
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          password: ${{ secrets.PYPI_API_TOKEN }}
